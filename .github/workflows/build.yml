name: Build and Test

on:
  push:
    branches:
    - "dev*"  # Support wildcard matching

  pull_request:
    branches: [ dev ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  test_build:
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get git vars
        shell: bash
        run: |
          echo "::set-output name=BRANCH::$(echo "${GITHUB_REF#refs/*/}")"
          echo "::set-output name=IMAGE_VERSION::$( git describe --tags --dirty --match "v[0-9]*")"
        id: gitVars

      - name: prepare some vars
        id: buildVars
        run: |
          VARIANT_IMAGE="${{ steps.gitVars.outputs.IMAGE_VERSION }}-${{ steps.gitVars.outputs.BRANCH }}"
          echo "::set-output name=VARIANT::$(echo "${VARIANT_IMAGE}")"
          echo "::set-output name=VARIANT_IMAGE::$(echo "$VARIANT_IMAGE")"
          echo "::set-output name=BUILD_DATE::$(  date --iso-8601=seconds --utc )"
          # detect rolling branch
          if [[ ${{ steps.gitVars.outputs.BRANCH }} == "master" ]]; then
          echo "::set-output name=TAG_ROLLING::latest"
          else
          echo "::set-output name=TAG_ROLLING::$( echo "${{ steps.gitVars.outputs.BRANCH }}" | tr '[A-Z]' '[a-z]' )"
          fi

      - name: Check variables
        run: |
          echo BRANCH: ${{ steps.gitVars.outputs.BRANCH }}
          echo IMAGE_VERSION: ${{ steps.gitVars.outputs.IMAGE_VERSION }}
          echo VARIANT: ${{ steps.buildVars.outputs.VARIANT }}
          echo VARIANT_IMAGE: ${{ steps.buildVars.outputs.VARIANT_IMAGE }}
          echo BUILD_DATE: ${{ steps.buildVars.outputs.BUILD_DATE }}
          echo ROLLING_TAG: ${{ steps.buildVars.outputs.TAG_ROLLING }}
          
      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v1.0.1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
             ${{ runner.os }}-buildx-

      - name: Build for test full blown amd64 
        uses: docker/build-push-action@v2
        id: docker_build
        with:
          context: .
          load: true  
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache
          tags: fhem/alexa-fhem:${{ steps.buildVars.outputs.VARIANT }}
          build-args: |
            BUILD_DATE=${{ steps.buildVars.outputs.BUILD_DATE }}
            TAG=${{ steps.buildVars.outputs.VARIANT }}
            TAG_ROLLING=${{ steps.buildVars.outputs.TAG_ROLLING }}
            IMAGE_VERSION=${{ steps.buildVars.outputs.VARIANT }}
            IMAGE_VCS_REF=${{ github.sha }}
            ALEXAFHEM_VERSION=0.5.57

      - name: Inspect and run integration tests
        run: |
          docker image inspect fhem/alexa-fhem:${{ steps.buildVars.outputs.VARIANT }}
          docker history fhem/alexa-fhem:${{ steps.buildVars.outputs.VARIANT }}
          ./scripts/test-integration.sh;

  published_build:
    runs-on: ubuntu-latest
    needs: test_build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout this repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Get git vars
        shell: bash
        run: |
          echo "::set-output name=IMAGE_VERSION::$( git describe --tags --dirty --match "v[0-9]*")"
          echo "::set-output name=BRANCH::$(echo "${GITHUB_REF#refs/*/}")"

        id: gitVars


      - name: prepare some vars
        id: buildVars
        run: |
          VARIANT_IMAGE="${{ steps.gitVars.outputs.IMAGE_VERSION }}-${{ steps.gitVars.outputs.BRANCH }}"
          echo "::set-output name=VARIANT::$(echo "${VARIANT_IMAGE}")"
          echo "::set-output name=VARIANT_IMAGE::$(echo "$VARIANT_IMAGE")"
          echo "::set-output name=BUILD_DATE::$(  date --iso-8601=seconds --utc )"
          # detect rolling branch
          if [[ ${{ steps.gitVars.outputs.BRANCH }} == "master" ]]; then
          echo "::set-output name=TAG_ROLLING::latest"
          else
          echo "::set-output name=TAG_ROLLING::$( echo "${{ steps.gitVars.outputs.BRANCH }}" | tr '[A-Z]' '[a-z]' )"
          fi

      - name: Check variables
        run: |
          echo BRANCH: ${{ steps.gitVars.outputs.BRANCH }}
          echo IMAGE_VERSION: ${{ steps.gitVars.outputs.IMAGE_VERSION }}
          echo VARIANT: ${{ steps.buildVars.outputs.VARIANT }}
          echo VARIANT_IMAGE: ${{ steps.buildVars.outputs.VARIANT_IMAGE }}
          echo BUILD_DATE: ${{ steps.buildVars.outputs.BUILD_DATE }}
          echo ROLLING_TAG: ${{ steps.buildVars.outputs.TAG_ROLLING }}
          
      - name: Docker Setup QEMU
        uses: docker/setup-qemu-action@v1.0.1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
           ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push cross compiled full blown image on supported platforms
        uses: docker/build-push-action@v2
        with:
          context: .
          load: false  
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache
          tags: |
            ghcr.io/${{ github.repository_owner }}/fhem/alexa-fhem:${{ steps.buildVars.outputs.TAG_ROLLING }}

          build-args: |
            BUILD_DATE=${{ steps.buildVars.outputs.BUILD_DATE }}
            TAG=${{ steps.buildVars.outputs.VARIANT }}
            TAG_ROLLING=${{ steps.buildVars.outputs.TAG_ROLLING }}
            IMAGE_VERSION=${{ steps.buildVars.outputs.VARIANT }}
            IMAGE_VCS_REF=${{ github.sha }}
            ALEXAFHEM_VERSION=0.5.61
